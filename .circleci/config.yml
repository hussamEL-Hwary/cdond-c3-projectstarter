version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: install aws cli v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-nodejs:
    description: install nodejs
    steps:
      - run:
          name: install nodejs 13
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install nodejs -y

  install-ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y 
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_Id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.Workflow_Id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: testing
          template: basic_fail_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: | 
            cd frontend
            npm run test
      - notify_on_failure
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend run test
          command: |
            cd backend
            npm run test
      - notify_on_failure
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
              cd frontend
              npm install 
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force              
              npm audit --audit-level=critical
      - notify_on_failure
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-buid]
      - run:
          name: scan backend
          command: |
              cd backend
              npm install 
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
      - notify_on_failure
  

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          # TODO: get ip addresses correctly
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - notify_on_failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["92:a6:d1:e3:19:a4:ed:50:bc:36:d4:6b:2f:cb:d9:d4"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
            apk add --update curl
            apk add --update jq
            apk add --update tar
            apk add --update gzip
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml  
            
      - destroy-environment    

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
      - destroy-environment
      - revert-migrations:
          Workflow_Id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install-nodejs
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations:
          Workflow_Id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install-ansible
      - install-nodejs
      - add_ssh_keys:
          fingerprints: ["92:a6:d1:e3:19:a4:ed:50:bc:36:d4:6b:2f:cb:d9:d4"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            cd ../
            tar -czf artifact.tar.gz backend
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR="./migrations"
            export TYPEORM_ENTITIES="./modules/domain/**/*.entity.js"
            export TYPEORM_MIGRATIONS="./migrations/*.ts"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations:
          Workflow_Id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/base:stable
    
    steps:
      - checkout
      - install_awscli
      - install-nodejs
      - run:
          name: run somke test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)

            export API_URL=http://{$BACKEND_IP}:3030/api/status
            if curl -s $API_URL | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: frontend smoke test
          command: |
            export FRONTEND-WEBSIT=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com
            if curl -s $FRONTEND-WEBSIT | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

  
  notify_on_sucess:
    docker: 
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: testing
          template: success_tagged_deployment_1


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
