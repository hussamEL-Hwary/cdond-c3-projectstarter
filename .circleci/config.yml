version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: testing
          template: basic_fail_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: | 
            cd frontend
            npm run test
      - notify_on_failure
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend run test
          command: |
            cd backend
            npm run test
      - notify_on_failure
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
              cd frontend
              npm install 
              npm audit fix --audit-level=critical --force             
              npm audit --audit-level=critical
      - notify_on_failure
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-buid]
      - run:
          name: scan backend
          command: |
              cd backend
              npm install 
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
      - notify_on_failure
  

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - notify_on_failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["92:a6:d1:e3:19:a4:ed:50:bc:36:d4:6b:2f:cb:d9:d4"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
            sudo apt-get install curl
            sudo apt-get install jq
            sudo apt-get install tar
            sudo apt-get install gzip
      - run: cat .circleci/ansible/inventory.txt
      #- run:
       #   name: Configure server
        #  command: |
         #   ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml  
            
      - destroy-environment:    

  
  notify_on_sucess:
    docker: 
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: testing
          template: success_tagged_deployment_1


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - notify_on_sucess:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
